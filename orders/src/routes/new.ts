import mongoose from 'mongoose';
import express, { Request, Response } from 'express';
import {
  requireAuth,
  validateRequest,
  NotFoundError,
  OrderStatus,
  BadRequestError,
} from '@vmticketsapp/common';
import { body } from 'express-validator';
import { Ticket } from '../models/ticket';
import { Order } from '../models/order';
import { OrderCreatedPublisher } from '../events/publishers/order-created-publisher';
import { natsWrapper } from '../nats-wrapper';

const router = express.Router();

const EXPIRATION_WINDOW_SECONDS = 1 * 60;

//since our tickets our stored in a mongo db, their ids will be generated by mongo so we could put a check here to make sure that the ticketId provided by user has a structure of a real mongo id
// in the custom() we provide a funcn that returns a boolean to decide if input provided was valid
router.post(
  '/api/orders',
  requireAuth,
  [
    body('ticketId')
      .not()
      .isEmpty()
      //.custom((input: string) => mongoose.Types.ObjectId.isValid(input))
      .withMessage('TicketId must be provided'),
  ],
  validateRequest,
  async (req: Request, res: Response) => {
    const { ticketId } = req.body;

    // Find the ticket the user is trying to order in the db
    const ticket = await Ticket.findById(ticketId);
    if (!ticket) {
      throw new NotFoundError();
    }

    // Make sure that the ticket is not already reserved
    const isReserved = await ticket.isReserved();
    if (isReserved) {
      throw new BadRequestError('Ticket is already reserved!');
    }

    // Calculate an expiration date for this order(the user has approx 15(or whateva time we choose) to pay before ticket is unlocked and can be bought by someone else)
    const expiration = new Date();
    expiration.setSeconds(expiration.getSeconds() + EXPIRATION_WINDOW_SECONDS);

    // Build the order and save it to db
    const order = Order.build({
      userId: req.currentUser!.id,
      status: OrderStatus.Created,
      expiresAt: expiration,
      ticket,
    });
    await order.save();

    // Publish an event saying that an order was created
    new OrderCreatedPublisher(natsWrapper.client).publish({
      id: order.id,
      version: order.version,
      status: order.status,
      userId: order.userId,
      expiresAt: order.expiresAt.toISOString(), //converts the date into UTC format
      ticket: {
        id: ticket.id,
        price: ticket.price,
      },
    }); //if we pass in a Date obj into expiresAt, when it eventually gets converted to JSON(since we can only send strings as events) the date obj converts itself into a string representing the CURRENT TIMEZONE(normal behaviour). Whenever we share timestamps across diff srvs we want to communicate them in a timezone agnostic kind of way. so ideally we provide a UTC timestamp which works regardless of what the timezone of the srv receiving the event is

    res.status(201).send(order);
  }
);

export { router as newOrderRouter };
